#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <termios.h>
#include <fcntl.h>

#define WIDTH 20
#define HEIGHT 20
#define INITIAL_LENGTH 3

int x, y, fruitX, fruitY, bonusX = -1, bonusY = -1;
int score, length, gameOver;
int tailX[100], tailY[100];
int difficulty;
int bonusTimer = 0;

enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };
enum Direction dir;

// Flicker-free: Move cursor to top-left without clearing
void clearScreen() {
    printf("\033[H");
}

// Hide/Show Cursor
void hideCursor() {
    printf("\033[?25l");
}
void showCursor() {
    printf("\033[?25h");
}

// Welcome screen
void welcomeScreen() {
    clearScreen();
    printf("==== SNAKE GAME ====\n\n");
    printf("Controls:\n");
    printf("  W - Up\n");
    printf("  S - Down\n");
    printf("  A - Left\n");
    printf("  D - Right\n");
    printf("  X - Exit\n\n");
    printf("Press ENTER to continue...");
    getchar();
}

// Difficulty selection
void selectDifficulty() {
    clearScreen();
    printf("Select Difficulty:\n");
    printf("1. Easy\n2. Medium\n3. Hard\nChoice: ");
    scanf("%d", &difficulty);
    getchar();
}

// Setup initial game
void setup() {
    dir = RIGHT;
    x = WIDTH / 2;
    y = HEIGHT / 2;
    fruitX = rand() % WIDTH;
    fruitY = rand() % HEIGHT;
    score = 0;
    length = INITIAL_LENGTH;
    gameOver = 0;
}

// Place fruit at valid location
void placeFruit() {
    int valid = 0;
    while (!valid) {
        fruitX = rand() % WIDTH;
        fruitY = rand() % HEIGHT;
        valid = 1;
        for (int i = 0; i < length; i++) {
            if (fruitX == tailX[i] && fruitY == tailY[i]) {
                valid = 0;
                break;
            }
        }
    }
}

// Random bonus fruit spawner
void spawnBonusFruit() {
    if (bonusX == -1 && rand() % 15 == 0) {
        bonusX = rand() % WIDTH;
        bonusY = rand() % HEIGHT;
        bonusTimer = 10;
    }
}

// Non-blocking input
int kbhit() {
    struct termios oldt, newt;
    int ch;
    int oldf;

    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
    fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);

    ch = getchar();
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    fcntl(STDIN_FILENO, F_SETFL, oldf);

    if (ch != EOF) {
        ungetc(ch, stdin);
        return 1;
    }
    return 0;
}

// Handle user input
void input() {
    if (kbhit()) {
        char c = getchar();
        switch (c) {
            case 'a': if (dir != RIGHT) dir = LEFT; break;
            case 'd': if (dir != LEFT) dir = RIGHT; break;
            case 'w': if (dir != DOWN) dir = UP; break;
            case 's': if (dir != UP) dir = DOWN; break;
            case 'x': gameOver = 1; break;
        }
    }
}

// Draw game screen
void draw() {
    clearScreen();
    for (int i = 0; i < WIDTH + 2; i++) printf("#");
    printf("\n");

    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            if (j == 0) printf("#");

            if (i == y && j == x)
                printf("\033[1;32mO\033[0m");
            else if (i == fruitY && j == fruitX)
                printf("🍎");
            else if (i == bonusY && j == bonusX)
                printf("💎");
            else {
                int printed = 0;
                for (int k = 0; k < length; k++) {
                    if (tailX[k] == j && tailY[k] == i) {
                        printf("\033[1;32mo\033[0m");
                        printed = 1;
                        break;
                    }
                }
                if (!printed) printf(" ");
            }

            if (j == WIDTH - 1) printf("#");
        }
        printf("\n");
    }

    for (int i = 0; i < WIDTH + 2; i++) printf("#");
    printf("\nScore: %d\n", score);
}

// Game logic
void logic() {
    int prevX = tailX[0];
    int prevY = tailY[0];
    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < length; i++) {
        int tmpX = tailX[i];
        int tmpY = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = tmpX;
        prevY = tmpY;
    }

    switch (dir) {
        case LEFT: x--; break;
        case RIGHT: x++; break;
        case UP: y--; break;
        case DOWN: y++; break;
    }

    // Wall wrap
    if (x >= WIDTH) x = 0; else if (x < 0) x = WIDTH - 1;
    if (y >= HEIGHT) y = 0; else if (y < 0) y = HEIGHT - 1;

    // Collision with self
    for (int i = 0; i < length; i++) {
        if (tailX[i] == x && tailY[i] == y) {
            gameOver = 1;
        }
    }

    // Eat fruit
    if (x == fruitX && y == fruitY) {
        score += 10;
        length++;
        placeFruit();
    }

    // Eat bonus
    if (bonusX != -1 && x == bonusX && y == bonusY) {
        score += 50;
        length += 2;
        bonusX = bonusY = -1;
        bonusTimer = 0;
    }

    // Bonus timer countdown
    if (bonusTimer > 0) {
        bonusTimer--;
        if (bonusTimer == 0) {
            bonusX = bonusY = -1;
        }
    }

    spawnBonusFruit();
}

// Game over screen
void gameOverScreen() {
    clearScreen();
    printf("\n\n\t=== GAME OVER ===\n");
    printf("\tFinal Score: %d\n", score);
    printf("\tThanks for playing!\n\n");
}

// Main game loop
int main() {
    srand(time(0));
    hideCursor();
    welcomeScreen();
    selectDifficulty();
    setup();
    placeFruit();

    while (!gameOver) {
        draw();
        input();
        logic();

        if (difficulty == 1) usleep(150000);
        else if (difficulty == 2) usleep(100000);
        else usleep(50000);
    }

    showCursor();
    gameOverScreen();
    return 0;
}
